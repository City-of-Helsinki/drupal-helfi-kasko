<?php

/**
 * @file
 * Contains alterations for content.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\helfi_kasko_content\UnitCategoryUtility;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function helfi_kasko_content_tpr_unit_access(EntityInterface $entity, $operation, AccountInterface $account) : AccessResult {
  /** @var \Drupal\helfi_tpr\Entity\Unit $entity */
  // Allow users with special permissions to update specific TPR units.
  if ($operation === 'update' && $entity->hasField('field_categories')) {
    $unit_categories = [];
    foreach ($entity->get('field_categories')->getValue() as $value) {
      if (!empty($value['value'])) {
        $unit_categories[] = $value['value'];
      }
    }

    if (in_array(UnitCategoryUtility::DAYCARE, $unit_categories)) {
      return AccessResult::allowedIfHasPermission($account, 'admin daycare units');
    }

    if (in_array(UnitCategoryUtility::COMPREHENSIVE_SCHOOL, $unit_categories)) {
      return AccessResult::allowedIfHasPermission($account, 'admin comprehensive school units');
    }

    if (in_array(UnitCategoryUtility::PLAYGROUND, $unit_categories)) {
      return AccessResult::allowedIfHasPermission($account, 'admin playground units');
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_kasko_content_form_views_exposed_form_alter(&$form, $form_state) {

  // Handle only Unit search view form at this point.
  if ($form['#id'] !== 'views-exposed-form-high-school-search-block') {
    return;
  }

  // Get view from form state.
  $view = $form_state->getStorage()['view'];
  $current_language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();

  // Apply the cached meta fields values to form values.
  $cached = \Drupal::cache()->get(
    $view->id() .
    $view->current_display .
    $current_language .
    $view->args[0]
  );

  if ($cached) {
    $meta_fields = $cached->data;
    if (!empty($meta_fields['field_hs_search_meta_button'])) {
      $form['actions']['submit']['#value'] = $meta_fields['field_hs_search_meta_button'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_kasko_content_preprocess_block(&$variables) {
  if ($variables['plugin_id'] !== 'hero_block') {
    return;
  }

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('helfi_platform_config.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if current entity doesn't have hero set.
  if (
    !$entity instanceof ContentEntityInterface ||
    !$entity->hasField('field_has_hero') ||
    !(bool) $entity->get('field_has_hero')->value ||
    $entity->get('field_content')->isEmpty()
  ) {
    return;
  }
  $paragraph = $entity->get('field_content')->first()->get('entity')->getValue();

  if (
    empty($paragraph) ||
    !in_array($entity->getType(), ['landing_page', 'page']) ||
    !$paragraph instanceof ParagraphInterface
  ) {
    return;
  }
  $first_paragraph_gray = &$variables['content']['hero_block']['#first_paragraph_grey'];

  // Check if the content field first paragraph is High school search
  // and add classes accordingly.
  if ($paragraph->getType() === 'high_school_search') {
    $first_paragraph_gray = 'has-first-gray-bg-block';

    // If lead_in field has value, unset 1st gray paragraph class.
    if (
      $entity->hasField('field_lead_in') &&
      !$entity->field_lead_in->isEmpty()
    ) {
      $first_paragraph_gray = '';
      return;
    }

    // If table of contents is enabled, unset 1st gray paragraph class.
    if (
      $entity->hasField('toc_enabled') &&
      $entity->toc_enabled->value == TRUE
    ) {
      $first_paragraph_gray = '';
      return;
    }

    // Special cases if the node type is page.
    if ($entity->getType() === 'page') {
      // Load menu links for the current page entity.
      $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
      $menu_links = $menu_link_manager->loadLinksByRoute(
        "entity.{$entity->getEntityTypeId()}.canonical",
        [$entity->getEntityTypeId() => $entity->id()]
      );

      // If the page is in navigation set a different value for 1st gray
      // paragraph class.
      if (!empty($menu_links) && is_array($menu_links)) {
        $menu_Link = reset($menu_links);

        if ($menu_Link->isEnabled()) {
          $first_paragraph_gray = 'has-first-gray-bg-block--desktop';
        }
      }
    }
  }
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_kasko_content_helfi_paragraph_types() : array {
  $entities = [
    'node' => [
      'page' => [
        'field_content' => [
          'group_news',
          'high_school_search',
          'vocational_school_search',
        ],
        'field_lower_content' => [
          'daycare_search',
          'group_news',
          'high_school_search',
          'vocational_school_search',
        ],
      ],
      'landing_page' => [
        'field_content' => [
          'daycare_search',
          'group_news',
          'group_news_archive',
          'high_school_search',
          'school_search',
          'vocational_school_search',
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType) {
          $enabled[] = new ParagraphTypeCollection($entityTypeId, $bundle, $field, $paragraphType);
        }
      }
    }
  }
  return $enabled;
}
