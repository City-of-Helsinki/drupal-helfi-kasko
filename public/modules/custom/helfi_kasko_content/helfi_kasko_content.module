<?php

/**
 * @file
 * Contains alterations for content.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\helfi_kasko_content\UnitCategoryUtility;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function helfi_kasko_content_tpr_unit_access(EntityInterface $entity, $operation, AccountInterface $account) : AccessResult {
  /** @var \Drupal\helfi_tpr\Entity\Unit $entity */
  // Allow users with special permissions to update specific TPR units.
  if ($operation === 'update' && $entity->hasField('field_categories')) {
    $unit_categories = [];
    foreach ($entity->get('field_categories')->getValue() as $value) {
      if (!empty($value['value'])) {
        $unit_categories[] = $value['value'];
      }
    }

    if (in_array(UnitCategoryUtility::DAYCARE, $unit_categories)) {
      return AccessResult::allowedIfHasPermission($account, 'admin daycare units');
    }

    if (in_array(UnitCategoryUtility::COMPREHENSIVE_SCHOOL, $unit_categories)) {
      return AccessResult::allowedIfHasPermission($account, 'admin comprehensive school units');
    }

    if (in_array(UnitCategoryUtility::PLAYGROUND, $unit_categories)) {
      return AccessResult::allowedIfHasPermission($account, 'admin playground units');
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_kasko_content_form_views_exposed_form_alter(&$form, $form_state) {

  // Handle only Unit search view form at this point.
  if ($form['#id'] !== 'views-exposed-form-high-school-search-block') {
    return;
  }

  // Get view from form state.
  $view = $form_state->getStorage()['view'];
  $current_language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();

  // Apply the cached meta fields values to form values.
  $cached = \Drupal::cache()->get(
    $view->id() .
    $view->current_display .
    $current_language .
    $view->args[0]
  );

  if ($cached) {
    $meta_fields = $cached->data;
    if (!empty($meta_fields['field_hs_search_meta_button'])) {
      $form['actions']['submit']['#value'] = $meta_fields['field_hs_search_meta_button'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_kasko_content_preprocess_block(&$variables) {
  if ($variables['plugin_id'] !== 'hero_block') {
    return;
  }

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('helfi_platform_config.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if current entity doesn't have hero set.
  if (
    !$entity instanceof ContentEntityInterface ||
    !$entity->hasField('field_has_hero') ||
    !(bool) $entity->get('field_has_hero')->value ||
    $entity->get('field_content')->isEmpty()
  ) {
    return;
  }
  $paragraph = $entity->get('field_content')->first()->get('entity')->getValue();

  if (
    empty($paragraph) ||
    !in_array($entity->bundle(), ['landing_page', 'page']) ||
    !$paragraph instanceof ParagraphInterface
  ) {
    return;
  }
  $first_paragraph_gray = &$variables['content']['hero_block']['#first_paragraph_grey'];

  // Check if the content field first paragraph is unit search clone
  // and add classes accordingly.
  $paragraph_types = [
    'after_school_activity_search',
    'daycare_search',
    'high_school_search',
    'playground_search',
    'school_search',
    'vocational_school_search',
  ];

  if (in_array($paragraph->getType(), $paragraph_types)) {
    $first_paragraph_gray = 'has-first-gray-bg-block';

    // If lead_in field has value, unset 1st gray paragraph class.
    if (
      $entity->hasField('field_lead_in') &&
      // @phpstan-ignore-next-line
      !$entity->field_lead_in->isEmpty()
    ) {
      $first_paragraph_gray = '';
      return;
    }

    // If table of contents is enabled, unset 1st gray paragraph class.
    if (
      $entity->hasField('toc_enabled') &&
      // @phpstan-ignore-next-line
      $entity->toc_enabled->value == TRUE
    ) {
      $first_paragraph_gray = '';
      return;
    }

    // Special cases if the node type is page.
    if ($entity->bundle() === 'page') {
      // Load menu links for the current page entity.
      $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
      $menu_links = $menu_link_manager->loadLinksByRoute(
        "entity.{$entity->getEntityTypeId()}.canonical",
        [$entity->getEntityTypeId() => $entity->id()]
      );

      // If the page is in navigation set a different value for 1st gray
      // paragraph class.
      if (!empty($menu_links) && is_array($menu_links)) {
        $menu_Link = reset($menu_links);

        if ($menu_Link->isEnabled()) {
          $first_paragraph_gray = 'has-first-gray-bg-block--desktop';
        }
      }
    }
  }
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_kasko_content_helfi_paragraph_types() : array {
  $entities = [
    'node' => [
      'page' => [
        'field_content' => [
          'vocational_school_search' => 18,
          'high_school_search' => 20,
          'group_news' => 21,
        ],
        'field_lower_content' => [
          'vocational_school_search' => 18,
          'after_school_activity_search' => 19,
          'playground_search' => 21,
          'high_school_search' => 22,
          'daycare_search' => 23,
          'group_news' => 24,
        ],
      ],
      'landing_page' => [
        'field_content' => [
          'vocational_school_search' => 18,
          'after_school_activity_search' => 19,
          'playground_search' => 20,
          'high_school_search' => 21,
          'school_search' => 22,
          'daycare_search' => 23,
          'group_news' => 24,
          'group_news_archive' => 25,
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType => $weight) {
          $enabled[] = new ParagraphTypeCollection($entityTypeId, $bundle, $field, $paragraphType, $weight);
        }
      }
    }
  }
  return $enabled;
}

/**
 * Implements hook_views_post_execute().
 */
function helfi_kasko_content_views_post_execute($view) {
  if ($view->id() == 'after_school_activity_search') {
    $current_language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();

    // Remove these strings from TPR unit titles.
    $removableStrings = [
      'Iltapäivätoiminta /',
      'Eftermiddagsverksamhet /',
      'Finskspråkig eftermiddagsverksamhet /',
      'After-school activities /',
    ];

    foreach ($view->result as &$row) {
      if ($row->_entity->hasTranslation($current_language)) {
        $translatedEntity = $row->_entity->getTranslation($current_language);
        $translatedEntity->set('name', trim(str_replace($removableStrings, '', $translatedEntity->get('name')->getString())));
      }
      else {
        $row->_entity->set('name', trim(str_replace($removableStrings, '', $row->_entity->get('name')->getString())));
      }
    }

    // Sort alphabetically based on parsed title.
    if ($current_language === 'en' || $current_language === 'sv') {
      uasort($view->result, fn($a, $b) => $a->_entity->getTranslation($current_language)->get('name')->getString() <=> $b->_entity->getTranslation($current_language)->get('name')->getString());
    }
    else {
      uasort($view->result, fn($a, $b) => $a->_entity->get('name')->getString() <=> $b->_entity->get('name')->getString());
    }
  }
}

/**
 * Implements hook_theme().
 */
function helfi_kasko_content_theme(): array {
  return [
    'tpr_ontologyword_details_formatter' => [
      'template' => 'tpr-unit-ontologyword-details',
      'variables' => [
        'schoolyear' => NULL,
        'a1' => [
          '#label' => NULL,
          '#items' => [],
        ],
        'a2' => [
          '#label' => NULL,
          '#items' => [],
        ],
        'b1' => [
          '#label' => NULL,
          '#items' => [],
        ],
        'b2' => [
          '#label' => NULL,
          '#items' => [],
        ],
        'bilingual_education' => [
          '#label' => NULL,
          '#items' => [],
        ],
        'language_immersion' => [
          '#label' => NULL,
          '#items' => [],
        ],
        'language_enriched_education' => [
          '#label' => NULL,
          '#items' => [],
        ],
        'special_emphasis_1' => [
          '#label' => NULL,
          '#items' => [],
        ],
        'special_emphasis_3' => [
          '#label' => NULL,
          '#items' => [],
        ],
        'special_emphasis_7' => [
          '#label' => NULL,
          '#items' => [],
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_views_data_alter().
 */
function helfi_kasko_content_views_data_alter(array &$data) {
  $data['tpr_unit']['emphasis_filter'] = [
    'title' => t('Emphasis filter'),
    'filter' => [
      'title' => t('Emphasis filter'),
      'help' => 'Filters units by emphasis.',
      'field' => 'nid',
      'id' => 'emphasis_filter',
    ],
  ];

  $data['tpr_unit']['educational_mission_filter'] = [
    'title' => t('Educational mission'),
    'filter' => [
      'title' => t('Educational mission'),
      'help' => 'Filters units by educational mission.',
      'field' => 'nid',
      'id' => 'educational_mission_filter',
    ],
  ];

  $data['tpr_unit']['study_programme_type_filter'] = [
    'title' => t('Study programme type'),
    'filter' => [
      'title' => t('Study programme type'),
      'help' => 'Filters units by study programme type.',
      'field' => 'nid',
      'id' => 'study_programme_type_filter',
    ],
  ];
}
